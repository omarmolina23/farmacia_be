// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Status {
  ACTIVO
  INACTIVO
}

model Proveedor {
  id       String  @id @default(uuid())
  nombre   String  @db.VarChar(100)
  telefono String  @db.VarChar(20)
  correo   String  @db.VarChar(50)
  estado   Status  @default(ACTIVO)
  lotes    Lote[]
}

model Lote {
  numero            String   @id @default(uuid())
  productoId        String
  proveedorId       String
  fechaVencimiento  DateTime
  estado   Status  @default(ACTIVO)

  producto          Producto @relation(fields: [productoId], references: [id])
  proveedor        Proveedor @relation(fields: [proveedorId], references: [id])
}

model Categoria {
  id      String    @id @default(uuid())
  nombre  String    @db.VarChar(50)
  estado   Status  @default(ACTIVO)
  productos Producto[]
}

model Producto {
  id          String    @id @default(uuid())
  nombre      String    @db.VarChar(100)
  precio      Decimal
  estado   Status  @default(ACTIVO)
  categoriaId String

  categoria   Categoria @relation(fields: [categoriaId], references: [id])
  lotes       Lote[]
  ventas      VentaProductoCliente[]
  snack       Snack?
  medicamento Medicamento?
}

model Snack {
  id               String  @id @default(uuid())
  fechaVencimiento DateTime
  producto         Producto @relation(fields: [id], references: [id])
}

model Medicamento {
  id      String  @id @default(uuid())
  dosis   Decimal
  producto Producto @relation(fields: [id], references: [id])
}

model Usuario {
  cedula    String  @id
  nombre    String  @db.VarChar(50)
  correo    String  @db.VarChar(50)
  clave     String  @db.VarChar(100)
  estado   Status  @default(ACTIVO)
  esAdmin   Boolean
  esVendedor Boolean
}

model Cliente {
  cedula   String  @id
  nombre   String  @db.VarChar(50)
  correo   String  @db.VarChar(50)
  ventas   VentaProductoCliente[]
}

model Venta {
  id       String   @id @default(uuid())
  total    Decimal  @db.Decimal(10, 0)
  fecha    DateTime
  devuelto Boolean
  productos VentaProductoCliente[]
}

model VentaProductoCliente {
  id         String  @id @default(uuid())
  productoId String
  ventaId    String
  clienteId  String
  cantidad   Int

  producto   Producto @relation(fields: [productoId], references: [id])
  venta      Venta    @relation(fields: [ventaId], references: [id])
  cliente    Cliente  @relation(fields: [clienteId], references: [cedula])
}
