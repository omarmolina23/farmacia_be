// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum documentType {
  CC  @map("Cédula de ciudadanía (CC)")
  CE  @map("Cédula de extranjería (CE)")
  NIT @map("(NIT) Número de Identificación Tributaria")
}

enum Status {
  ACTIVE
  INACTIVE
}

model User {
  id               String       @id
  documentType     documentType @default(CC)
  name             String       @db.VarChar(50)
  phone            String       @db.VarChar(20)
  email            String       @unique @db.VarChar(50)
  password         String?      @db.VarChar(150)
  birthdate        DateTime
  registrationDate DateTime     @default(now())
  status           Status       @default(INACTIVE)
  isAdmin          Boolean      @default(false)
  isEmployee       Boolean      @default(true)
}

model Client {
  id    String @id
  name  String @db.VarChar(50)
  email String @db.VarChar(50)
  phone String @db.VarChar(20)

  Sale Sale[]
}

model Supplier {
  id     String @id @default(uuid())
  name   String @db.VarChar(100)
  phone  String @db.VarChar(20)
  email  String @unique @db.VarChar(50)
  status Status @default(ACTIVE)

  Product Product[]
}

model Batch {
  id               String   @id @default(uuid())
  productId        String
  expirationDate   DateTime
  entryDate        DateTime @default(now())
  status           Status   @default(ACTIVE)
  isExpired        Boolean  @default(false)
  number_batch     String   @db.VarChar(50)
  amount           Int
  available_amount Int
  purchaseValue    Decimal  @default(0) @db.Decimal(10, 0)

  product Product @relation(fields: [productId], references: [id])

  SaleBatch SaleBatch[]
}

model Category {
  id       String    @id @default(uuid())
  name     String    @db.VarChar(50)
  status   Status    @default(ACTIVE)
  products Product[]
}

model Product {
  id               String  @id @default(uuid())
  barcode          String? @db.VarChar(50)
  name             String  @db.VarChar(100)
  description      String? @db.VarChar(200)
  status           Status  @default(ACTIVE)
  categoryId       String
  supplierId       String
  price            Decimal @default(0)
  concentration    String? @db.VarChar(50)
  activeIngredient String? @db.VarChar(50)
  weight           String? @db.VarChar(50)
  volume           String? @db.VarChar(50)

  category Category            @relation(fields: [categoryId], references: [id])
  supplier Supplier            @relation(fields: [supplierId], references: [id])
  batches  Batch[]
  sales    SaleProductClient[]

  ProductTag ProductTag[]
  images     ProductImage[]
}

model ProductImage {
  id        String @id @default(uuid())
  productId String
  url       String @db.VarChar(200)

  product Product @relation(fields: [productId], references: [id])
}

model Sale {
  id                 String   @id @default(uuid())
  clientId           String   @db.VarChar(50)
  employeeName       String   @db.VarChar(50)
  total              Decimal  @db.Decimal(10, 0)
  date               DateTime @default(now())
  bill_id            Decimal  @db.Decimal(10, 0)
  number_e_invoice   String?  
  number_credit_note String?  
  cufe               String?  
  qr_image           String?  

  repaid Boolean @default(false)

  client   Client              @relation(fields: [clientId], references: [id])
  products SaleProductClient[]
}

model SaleProductClient {
  id        String @id @default(uuid())
  productId String
  saleId    String
  amount    Int

  products Product @relation(fields: [productId], references: [id])
  venta    Sale    @relation(fields: [saleId], references: [id])

  SaleBatch SaleBatch[]
}

model SaleBatch {
  id            String @id @default(uuid())
  saleProductId String
  batchId       String
  quantity      Int

  saleProduct SaleProductClient @relation(fields: [saleProductId], references: [id])
  batch       Batch             @relation(fields: [batchId], references: [id])
}

model ProductTag {
  id        String @id @default(uuid())
  productId String
  tagId     String

  product Product @relation(fields: [productId], references: [id])
  tag     Tag     @relation(fields: [tagId], references: [id])
}

model Tag {
  id   String @id @default(uuid())
  name String @db.VarChar(50)

  ProductTag ProductTag[]
}
